//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FortranCodeNavCore.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FortranCodeNavCore.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fortran_codenav_128 {
            get {
                object obj = ResourceManager.GetObject("fortran_codenav_128", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fortran_codenav_64_nobg {
            get {
                object obj = ResourceManager.GetObject("fortran_codenav_64_nobg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Function_Icon {
            get {
                object obj = ResourceManager.GetObject("Function_Icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Interface_Icon {
            get {
                object obj = ResourceManager.GetObject("Interface_Icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to abs(a) computes the absolute value of a.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = abs(a)
        ///
        ///Arguments: 
        ///a - the type of the argument shall be an integer, real, or complex.
        ///
        ///Return value:
        ///The return value is of the same type and kind as the argument except the return value is real for a complex argument.
        ///http://fortranwiki.org/fortran/show/abs.
        /// </summary>
        internal static string intr_abs {
            get {
                return ResourceManager.GetString("intr_abs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to achar(i) returns the character located at position i in the ASCII collating sequence.
        ///
        ///Standard:
        ///FORTRAN 77 and later, with kind argument Fortran 2003 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = achar(i [, kind])
        ///
        ///Arguments: 
        ///i - the type shall be integer.
        ///kind - (optional) an integer initialization expression indicating the kind parameter of the result.
        ///
        ///Return value:
        ///The return value is of type character with a length of one. If the kind argument is present, the return value i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_achar {
            get {
                return ResourceManager.GetString("intr_achar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to acos(x) computes the arccosine of x (inverse of cos(x)).
        ///
        ///Standard:
        ///FORTRAN 77 and later, for a complex argument Fortran 2008 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax:
        ///result = acos(x)
        ///
        ///Arguments: 
        ///x - The type shall be real with a magnitude that is less than one.
        ///
        ///Return value:
        ///The return value is of the same type and kind as x. The real part of the result is in radians and lies in the range 0≤acos(x)≤π.
        ///http://fortranwiki.org/fortran/show/acos.
        /// </summary>
        internal static string intr_acos {
            get {
                return ResourceManager.GetString("intr_acos", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to acosh(x) computes the inverse hyperbolic cosine of x.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = acosh(x)
        ///
        ///Arguments: 
        ///x - the type shall be real or complex.
        ///
        ///Return value:
        ///The return value has the same type and kind as x. If x is complex, the imaginary part of the result is in radians and lies between 0≤Imacosh(x)≤π.
        ///http://fortranwiki.org/fortran/show/acosh.
        /// </summary>
        internal static string intr_acosh {
            get {
                return ResourceManager.GetString("intr_acosh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to adjustl(string) will left adjust a string by removing leading spaces. Spaces are inserted at the end of the string as needed.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = adjustl(string)
        ///
        ///Arguments: 
        ///string - the type shall be character.
        ///
        ///Return value:
        ///The return value is of type character and of the same kind as string where leading spaces are removed and the same number of spaces are inserted on the end of string.
        ///http://fortranwiki.org/fortran/show/adjust [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_adjustl {
            get {
                return ResourceManager.GetString("intr_adjustl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to adjustr(string) will right adjust a string by removing trailing spaces. Spaces are inserted at the start of the string as needed.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = adjustr(string)
        ///
        ///Arguments: 
        ///string - the type shall be character.
        ///
        ///Return value:
        ///The return value is of type character and of the same kind as string where trailing spaces are removed and the same number of spaces are inserted at the start of string.
        ///http://fortranwiki.org/fortran/show [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_adjustsr {
            get {
                return ResourceManager.GetString("intr_adjustsr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to aimag(z) yields the imaginary part of complex argument z. The imag(z) and imagpart(z) intrinsic functions are provided for compatibility with g77, and their use in new code is strongly discouraged.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = aimag(z)
        ///
        ///Arguments: 
        ///z - The type of the argument shall be complex.
        ///
        ///Return value:
        ///The return value is of type real with the kind type parameter of the argument.
        ///http://fortranwiki.org/fortran/show/aimag.
        /// </summary>
        internal static string intr_aimag {
            get {
                return ResourceManager.GetString("intr_aimag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to aint(a [, kind]) truncates its argument to a whole number.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = aint(a [, kind])
        ///
        ///Arguments: 
        ///a - the type of the argument shall be real.
        ///kind - (optional) an integer initialization expression indicating the kind parameter of the result.
        ///
        ///Return value:
        ///The return value is of type real with the kind type parameter of the argument if the optional kind is absent; otherwise, the kind type parameter will be given by kind. I [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_aint {
            get {
                return ResourceManager.GetString("intr_aint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to all(mask [, dim]) determines if all the values are true in mask in the array along dimension dim.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class: 
        ///Transformational function
        ///
        ///Syntax: 
        ///result = all(mask [, dim])
        ///
        ///Arguments: 
        ///mask - the type of the argument shall be logical and it shall not be scalar.
        ///dim - (optional) dim shall be a scalar integer with a value that lies between one and the rank of mask.
        ///
        ///Return value:
        ///all(mask) returns a scalar value of type logical where the kind type parameter is the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_all {
            get {
                return ResourceManager.GetString("intr_all", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to allocated(array) and allocated(scalar) check the allocation status of array and scalar, respectively.
        ///
        ///Standard:
        ///Fortran 95 and later. Note, the scalar= keyword and allocatable scalar entities are available in Fortran 2003 and later.
        ///
        ///Class: 
        ///Inquiry function
        ///
        ///Syntax: 
        ///result = allocated(array)
        ///result = allocated(scalar)
        ///Arguments: 
        ///array - the argument shall be an allocatable array.
        ///scalar - the argument shall be an allocatable scalar.
        ///
        ///Return value:
        ///The return value is a scalar logical wit [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_allocated {
            get {
                return ResourceManager.GetString("intr_allocated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to anint(a [, kind]) rounds its argument to the nearest whole number.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = anint(a [, kind])
        ///
        ///Arguments: 
        ///a - the type of the argument shall be real.
        ///kind - (optional) an integer initialization expression indicating the kind parameter of the result.
        ///
        ///Return value:
        ///The return value is of type real with the kind type parameter of the argument if the optional kind is absent; otherwise, the kind type parameter will be given b [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_anint {
            get {
                return ResourceManager.GetString("intr_anint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to any(mask [, dim]) determines if any of the values in the logical array mask along dimension dim are .true..
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class: 
        ///Transformational function
        ///
        ///Syntax: 
        ///result = any(mask [, dim])
        ///
        ///Arguments: 
        ///mask - the type of the argument shall be logical and it shall not be scalar.
        ///dim - (optional) dim shall be a scalar integer with a value that lies between one and the rank of mask.
        ///
        ///Return value:
        ///any(mask) returns a scalar value of type logical where the kind type parame [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_any {
            get {
                return ResourceManager.GetString("intr_any", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asin(x) computes the arcsine of its x (inverse of sin(x)).
        ///
        ///Standard:
        ///FORTRAN 77 and later, for a complex argument Fortran 2008 or later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = asin(x)
        ///
        ///Arguments: 
        ///x - The type shall be either real and a magnitude that is less than or equal to one or be complex.
        ///
        ///Return value:
        ///The return value is of the same type and kind as x. The real part of the result is in radians and lies in the range −π/2≤asin(x)≤π/2.
        ///http://fortranwiki.org/fortran/show/asin.
        /// </summary>
        internal static string intr_asin {
            get {
                return ResourceManager.GetString("intr_asin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asinh(x) computes the inverse hyperbolic sine of x.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = asinh(x)
        ///Arguments: 
        ///x - The type shall be real or complex.
        ///
        ///Return value:
        ///The return value is of the same type and kind as x. If x is complex, the imaginary part of the result is in radians and lies between −π/2≤Imasinh(x)≤π/2 -\pi/2.
        ///http://fortranwiki.org/fortran/show/asinh.
        /// </summary>
        internal static string intr_asinh {
            get {
                return ResourceManager.GetString("intr_asinh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to associated(pointer [, target]) determines the status of the pointer pointer or if pointer is associated with the target target.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class: 
        ///Inquiry function
        ///
        ///Syntax: 
        ///result = associated(pointer [, target])
        ///
        ///Arguments: 
        ///pointer - pointer shall have the pointer attribute and it can be of any type.
        ///target - (Optional) target shall be a pointer or a target. It must have the same type, kind type parameter, and array rank as pointer.
        ///The association status of neither po [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_associated {
            get {
                return ResourceManager.GetString("intr_associated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atan(x) computes the arctangent of x.
        ///
        ///Standard:
        ///FORTRAN 77 and later; for a complex argument and for two arguments Fortran 2008 or later
        ///
        ///Class: 
        ///Elemental function
        ///
        ///Syntax: 
        ///result = atan(x)
        ///result = atan(y, x)
        ///Arguments: 
        ///x - The type shall be real or complex; if y is present, x shall be real.
        ///y - Shall be of the same type and kind as x.
        ///
        ///Return value:
        ///The return value is of the same type and kind as x. If y is present, the result is identical to atan2(y,x). Otherwise, it the arcus tangen [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atan {
            get {
                return ResourceManager.GetString("intr_atan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_add(atom, value) atomically adds the value of var to the variable atom. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.
        ///
        ///Standard:
        ///TS 18508 or later
        ///
        ///Class: 
        ///Atomic subroutine
        ///
        ///Syn [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_add {
            get {
                return ResourceManager.GetString("intr_atomic_add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_cas compares the variable atom with the value of compare; if the value is the same, atom is set to the value of new. Additionally, old is set to the value of atom that was used for the comparison. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_cas {
            get {
                return ResourceManager.GetString("intr_atomic_cas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_define(atom, value) defines the variable atom with the value value atomically. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.
        ///
        ///Standard:
        ///Fortran 2008 and later; with stat, TS 18508 or  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_define {
            get {
                return ResourceManager.GetString("intr_atomic_define", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_fetch_add(atom, value, old) atomically stores the value of atom in old and adds the value of var to the variable atom. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.
        ///
        ///Standard:
        ///TS 1850 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_fetch_add {
            get {
                return ResourceManager.GetString("intr_atomic_fetch_add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_fetch_and(atom, value, old) atomically stores the value of atom in old and defines atom with the bitwise and between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_fetch_and {
            get {
                return ResourceManager.GetString("intr_atomic_fetch_and", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_fetch_or(atom, value, old) atomically stores the value of atom in old and defines atom with the bitwise or between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_im [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_fetch_or {
            get {
                return ResourceManager.GetString("intr_atomic_fetch_or", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_fetch_xor(atom, value, old) atomically stores the value of atom in old and defines atom with the bitwise xor between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_fetch_xor {
            get {
                return ResourceManager.GetString("intr_atomic_fetch_xor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_or(atom, value) atomically defines atom with the bitwise or between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.
        ///
        ///Standard:
        ///TS 18508 or later
        ///
        ///Class:  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_or {
            get {
                return ResourceManager.GetString("intr_atomic_or", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to atomic_ref(atom, value) atomically assigns the value of the variable atom to value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.
        ///
        ///Standard:
        ///Fortran 2008 and later; with stat, TS 18508 or la [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_atomic_ref {
            get {
                return ResourceManager.GetString("intr_atomic_ref", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to call atomic_xor(atom, value [, stat])
        ///Arguments: 
        ///atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
        ///value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
        ///stat - (optional) Scalar default-kind integer variable.
        ///http://fortranwiki.org/fortran/show/atomic_xor.
        /// </summary>
        internal static string intr_atomic_xor {
            get {
                return ResourceManager.GetString("intr_atomic_xor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bessel_j0(x) computes the Bessel function of the first kind of order 0 of x.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = bessel_j0(x)
        ///
        ///Arguments:
        ///x - The type shall be real.
        ///
        ///Return value:
        ///The return value is of type real and lies in the range −0.4027...≤Bessel(0,x)≤1. It has the same kind as x.
        ///http://fortranwiki.org/fortran/show/bessel_j0.
        /// </summary>
        internal static string intr_bessel_j0 {
            get {
                return ResourceManager.GetString("intr_bessel_j0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bessel_j1(x) computes the Bessel function of the first kind of order 1 of x.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = bessel_j1(x)
        ///
        ///Arguments:
        ///x - The type shall be real.
        ///
        ///Return value:
        ///The return value is of type real and lies in the range −0.5818...≤Bessel(0,x)≤0.5818. It has the same kind as x.
        ///http://fortranwiki.org/fortran/show/bessel_j1.
        /// </summary>
        internal static string intr_bessel_j1 {
            get {
                return ResourceManager.GetString("intr_bessel_j1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bessel_jn(n, x) computes the Bessel function of the first kind of order n of x. If n and x are arrays, their ranks and shapes shall conform.
        ///
        ///bessel_jn(n1, n2, x) returns an array with the Bessel functions of the first kind of the orders n1 to n2.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function, except for the transformational variant bessel_jn(n1, n2, x).
        ///
        ///Syntax
        ///result = bessel_jn(n, x)
        ///result = bessel_jn(n1, n2, x)
        ///
        ///Arguments:
        ///n - Shall be a scalar or an array of type integer. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_bessel_jn {
            get {
                return ResourceManager.GetString("intr_bessel_jn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bessel_y0(x) computes the Bessel function of the second kind of order 0 of x.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = bessel_y0(x)
        ///
        ///Arguments:
        ///x - The type shall be real.
        ///
        ///Return value:
        ///The return value is of type real. It has the same kind as x.
        ///http://fortranwiki.org/fortran/show/bessel_y0.
        /// </summary>
        internal static string intr_bessel_y0 {
            get {
                return ResourceManager.GetString("intr_bessel_y0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bessel_y1(x) computes the Bessel function of the second kind of order 1 of x.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = bessel_y1(x)
        ///
        ///Arguments:
        ///x - The type shall be real.
        ///
        ///Return value:
        ///The return value is real. It has the same kind as x.
        ///http://fortranwiki.org/fortran/show/bessel_y1.
        /// </summary>
        internal static string intr_bessel_y1 {
            get {
                return ResourceManager.GetString("intr_bessel_y1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bessel_yn(n, x) computes the Bessel function of the second kind of order n of x. If n and x are arrays, their ranks and shapes shall conform.
        ///
        ///bessel_yn(n1, n2, x) returns an array with the Bessel functions of the first kind of the orders n1 to n2.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function, except for the transformational function bessel_yn(n1, n2, x)
        ///
        ///Syntax
        ///result = bessel_yn(n, x)
        ///result = bessel_yn(n1, n2, x)
        ///
        ///Arguments:
        ///n - Shall be a scalar or an array of type integer [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_bessel_yn {
            get {
                return ResourceManager.GetString("intr_bessel_yn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bge(i, j) determines whether an integer is a bitwise greater than or equal to another.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = bge(i, j)
        ///
        ///Arguments:
        ///i - Shall be of integer type.
        ///j - Shall be of integer type, and of the same kind as i.
        ///
        ///Return value:
        ///The return value is of type logical and of the default kind.
        ///http://fortranwiki.org/fortran/show/bge.
        /// </summary>
        internal static string intr_bge {
            get {
                return ResourceManager.GetString("intr_bge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bgt(i, j) determines whether an integer is bitwise greater than another.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = bgt(i, j)
        ///
        ///Arguments:
        ///i - Shall be of integer type.
        ///j - Shall be of integer type, and of the same kind as i.
        ///
        ///Return value:
        ///The return value is of type logical and of the default kind.
        ///http://fortranwiki.org/fortran/show/bgt.
        /// </summary>
        internal static string intr_bgt {
            get {
                return ResourceManager.GetString("intr_bgt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bit_size(i) returns the number of bits (integer precision plus sign bit) represented by the type of i.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class:
        ///Inquiry function
        ///
        ///Syntax
        ///result = bit_size(i)
        ///
        ///Arguments:
        ///i - The type shall be integer.
        ///
        ///Return value:
        ///The return value is of type integer
        ///http://fortranwiki.org/fortran/show/bit_size.
        /// </summary>
        internal static string intr_bit_size {
            get {
                return ResourceManager.GetString("intr_bit_size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ble(i, j) determines whether an integer is bitwise less than or equal to another.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = ble(i, j)
        ///
        ///Arguments:
        ///i - Shall be of integer type.
        ///j - Shall be of integer type, and of the same kind as i.
        ///
        ///Return value:
        ///The return value is of type logical and of the default kind.
        ///http://fortranwiki.org/fortran/show/ble.
        /// </summary>
        internal static string intr_ble {
            get {
                return ResourceManager.GetString("intr_ble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to blt(i, j) determines whether an integer is bitwise less than another.
        ///
        ///Standard:
        ///Fortran 2008 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = blt(i, j)
        ///
        ///Arguments:
        ///i - Shall be of integer type.
        ///j - Shall be of integer type, and of the same kind as i.
        ///
        ///Return value:
        ///The return value is of type logical and of the default kind.
        ///http://fortranwiki.org/fortran/show/blt.
        /// </summary>
        internal static string intr_blt {
            get {
                return ResourceManager.GetString("intr_blt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to btest(i,pos) returns logical .true. if the bit at pos in i is set.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax
        ///result = btest(i, pos)
        ///
        ///Arguments:
        ///i - The type shall be integer.
        ///pos - The type shall be integer. A value of zero refers to the least significant bit.
        ///
        ///Return value:
        ///The return value is of type logical.
        ///http://fortranwiki.org/fortran/show/btest.
        /// </summary>
        internal static string intr_btest {
            get {
                return ResourceManager.GetString("intr_btest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///c_associated(c_prt_1[, c_ptr_2]) determines the status of the C pointer c_ptr_1 or if c_ptr_1 is associated with the target c_ptr_2.
        ///
        ///Standard:
        ///Fortran 2003 and later
        ///
        ///Class:
        ///Inquiry function
        ///
        ///Syntax:
        ///result = c_associated(c_prt_1[, c_ptr_2])
        ///Arguments:
        ///c_ptr_1 - Scalar of the type c_ptr or c_funptr.
        ///c_ptr_2 - (Optional) Scalar of the same type as c_ptr_1.
        ///
        ///Return value:
        ///The return value is of type logical; it is .false. if either c_ptr_1 is a C NULL pointer or if c_ptr1 and c_ptr_2 point t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_c_associated {
            get {
                return ResourceManager.GetString("intr_c_associated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to c_f_pointer(cptr, fptr[, shape]) Assign the target, the C pointer, cptr to the Fortran pointer fptr and specify its shape.
        ///
        ///Standard:
        ///Fortran 2003 and later
        ///
        ///Class:
        ///Subroutine
        ///
        ///Syntax:
        ///call c_f_pointer(cptr, fptr[, shape])
        ///Arguments:
        ///cptr - scalar of the type c_ptr. It is intent(in).
        ///fptr - pointer interoperable with cptr. It is intent(out).
        ///shape - (Optional) Rank-one array of type integer with intent(in). It shall be present if and only if fptr is an array. The size must be equal to the rank  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_c_f_pointer {
            get {
                return ResourceManager.GetString("intr_c_f_pointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///c_f_procpointer(cptr, fptr) assigns the target of the C function pointer cptr to the Fortran procedure pointer fptr.
        ///
        ///Standard:
        ///Fortran 2003 and later
        ///
        ///Class:
        ///Subroutine
        ///
        ///Syntax:
        ///call c_f_procpointer(cptr, fptr)
        ///
        ///Arguments:
        ///cptr - scalar of the type c_funptr. It is intent(in).
        ///fptr - procedure pointer interoperable with cptr. It is intent(out).
        ///http://fortranwiki.org/fortran/show/c_f_procpointer.
        /// </summary>
        internal static string intr_c_f_procpointer {
            get {
                return ResourceManager.GetString("intr_c_f_procpointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to c_funloc(x) determines the C address of the argument.
        ///
        ///Standard:
        ///Fortran 2003 and later
        ///
        ///Class:
        ///Inquiry function
        ///
        ///Syntax:
        ///result = c_funloc(x)
        ///Arguments:
        ///x - Interoperable function or pointer to such function.
        ///
        ///Return value:
        ///The return value is of type c_funptr and contains the C address of the argument.
        ///http://fortranwiki.org/fortran/show/c_funloc.
        /// </summary>
        internal static string intr_c_funloc {
            get {
                return ResourceManager.GetString("intr_c_funloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to c_loc(x) determines the C address of the argument.
        ///
        ///Standard:
        ///Fortran 2003 and later
        ///
        ///Class:
        ///Inquiry function
        ///
        ///Syntax:
        ///result = c_loc(x)
        ///Arguments:
        ///x - Shall have either the pointer or target attribute. It shall not be a coindexed object. It shall either be a variable with interoperable type and kind type parameters, or be a scalar, nonpolymorphic variable with no length type parameters.
        ///
        ///Return value:
        ///The return value is of type c_ptr and contains the C address of the argument.
        ///http://fortra [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_c_loc {
            get {
                return ResourceManager.GetString("intr_c_loc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to c_sizeof(x) calculates the number of bytes of storage the expression x occupies.
        ///
        ///Standard:
        ///Fortran 2008
        ///
        ///Class:
        ///Intrinsic function
        ///
        ///Syntax:
        ///n = c_sizeof(x)
        ///Arguments:
        ///x - The argument shall be an interoperable data entity.
        ///
        ///Return value:
        ///The return value is of type integer and of the system-dependent kind c_size_t (from the iso_c_binding module). Its value is the number of bytes occupied by the argument. If the argument has the pointer attribute, the number of bytes of the storage area pointe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_c_sizeof {
            get {
                return ResourceManager.GetString("intr_c_sizeof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ceiling(a) returns the least integer greater than or equal to a.
        ///
        ///Standard:
        ///Fortran 95 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax:
        ///result = ceiling(a [, kind])
        ///
        ///Arguments:
        ///a - The type shall be real.
        ///kind - (Optional) An integer initialization expression indicating the kind parameter of the result.
        ///
        ///Return value:
        ///The return value is of type integer(kind) if kind is present and a default-kind integer otherwise.
        ///http://fortranwiki.org/fortran/show/ceiling.
        /// </summary>
        internal static string intr_ceiling {
            get {
                return ResourceManager.GetString("intr_ceiling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to char(i [, kind]) returns the character represented by the integer i.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax:
        ///result = char(i [, kind])
        ///
        ///Arguments:
        ///i - The type shall be integer.
        ///kind - (Optional) An integer initialization expression indicating the kind parameter of the result.
        ///
        ///Return value:
        ///The return value is of type character(1)
        ///http://fortranwiki.org/fortran/show/char.
        /// </summary>
        internal static string intr_char {
            get {
                return ResourceManager.GetString("intr_char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cmplx(x [, y [, kind]]) returns a complex number where x is converted to the real component. If y is present it is converted to the imaginary component. If y is not present then the imaginary component is set to 0.0. If x is complex then y must not be present.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax:
        ///result = cmplx(x [, y [, kind]])
        ///
        ///Arguments:
        ///x - The type may be integer, real, or complex.
        ///y - (Optional; only allowed if x is not complex.) May be integer or real.
        ///kin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_cmplx {
            get {
                return ResourceManager.GetString("intr_cmplx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to co_broadcast copies the value of argument a on the image with image index source_image to all images in the current team. a becomes defined as if by intrinsic assignment. If the execution was successful and stat is present, it is assigned the value zero. If the execution failed, stat gets assigned a nonzero value and, if present, errmsg gets assigned a value describing the occurred error.
        ///
        ///Standard:
        ///TS 18508 or later
        ///
        ///Class:
        ///Collective subroutine
        ///
        ///Syntax:
        ///call co_broadcast(a, source_image [, stat,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_co_broadcast {
            get {
                return ResourceManager.GetString("intr_co_broadcast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to co_max determines element-wise the maximal value of a on all images of the current team. If result_image is present, the maximum values are returned in a on the specified image only and the value of a on the other images become undefined. If result_image is not present, the value is returned on all images. If the execution was successful and stat is present, it is assigned the value zero. If the execution failed, stat gets assigned a nonzero value and, if present, errmsg gets assigned a value describing the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_co_max {
            get {
                return ResourceManager.GetString("intr_co_max", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to co_min determines element-wise the minimal value of a on all images of the current team. If result_image is present, the minimal values are returned in a on the specified image only and the value of a on the other images become undefined. If result_image is not present, the value is returned on all images. If the execution was successful and stat is present, it is assigned the value zero. If the execution failed, stat gets assigned a nonzero value and, if present, errmsg gets assigned a value describing the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_co_min {
            get {
                return ResourceManager.GetString("intr_co_min", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to co_reduce determines element-wise the reduction of the value of a on all images of the current team. The pure function passed as operator is used to pairwise reduce the values of a by passing either the value of a of different images or the result values of such a reduction as argument. If a is an array, the deduction is done element wise. If result_image is present, the result values are returned in a on the specified image only and the value of a on the other images become undefined. If result_image is no [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_co_reduce {
            get {
                return ResourceManager.GetString("intr_co_reduce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to co_sum sums up the values of each element of a on all images of the current team. If result_image is present, the summed-up values are returned in a on the specified image only and the value of a on the other images become undefined. If result_image is not present, the value is returned on all images. If the execution was successful and stat is present, it is assigned the value zero. If the execution failed, stat gets assigned a nonzero value and, if present, errmsg gets assigned a value describing the occu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_co_sum {
            get {
                return ResourceManager.GetString("intr_co_sum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to command_argument_count returns the number of arguments passed on the command line when the containing program was invoked.
        ///
        ///Standard:
        ///Fortran 2003 and later
        ///
        ///Class:
        ///Inquiry function
        ///
        ///Syntax:
        ///result = command_argument_count()
        ///Arguments:
        ///None
        ///
        ///
        ///Return value:
        ///The return value is of type integer(4)
        ///http://fortranwiki.org/fortran/show/command_argument_count.
        /// </summary>
        internal static string intr_command_argument_count {
            get {
                return ResourceManager.GetString("intr_command_argument_count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to compiler_options returns a string with the options used for compiling.
        ///
        ///Standard:
        ///Fortran 2008
        ///
        ///Class:
        ///Inquiry function of the module iso_fortran_env
        ///
        ///Syntax:
        ///str = compiler_options()
        ///Arguments:
        ///None.
        ///
        ///
        ///Return value:
        ///The return value is a default-kind string with system-dependent length. It contains the compiler flags used to compile the file, which called the compiler_options intrinsic.
        ///http://fortranwiki.org/fortran/show/compiler_options.
        /// </summary>
        internal static string intr_compiler_options {
            get {
                return ResourceManager.GetString("intr_compiler_options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to conjg(z) returns the conjugate of z. If z is (x, y) then the result is (x, -y)
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax:
        ///z = conjg(z)
        ///
        ///Arguments:
        ///z - The type shall be complex.
        ///
        ///Return value:
        ///The return value is of type complex.
        ///http://fortranwiki.org/fortran/show/conjg.
        /// </summary>
        internal static string intr_conjg {
            get {
                return ResourceManager.GetString("intr_conjg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cos(x) computes the cosine of x.
        ///
        ///Standard:
        ///FORTRAN 77 and later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax:
        ///result = cos(x)
        ///
        ///Arguments:
        ///x - The type shall be real or complex.
        ///
        ///Return value:
        ///The return value is of the same type and kind as x. The real part of the result is in radians. If x is of the type real, the return value lies in the range -1 &lt;= cos(x) &lt;= 1.
        ///http://fortranwiki.org/fortran/show/cos.
        /// </summary>
        internal static string intr_cos {
            get {
                return ResourceManager.GetString("intr_cos", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cosh(x) computes the hyperbolic cosine of x.
        ///
        ///Standard:
        ///FORTRAN 77 and later, for a complex argument Fortran 2008 or later
        ///
        ///Class:
        ///Elemental function
        ///
        ///Syntax:
        ///x = cosh(x)
        ///Arguments:
        ///x - The type shall be real or complex.
        ///
        ///Return value:
        ///The return value has same type and kind as x. If x is complex, the imaginary part of the result is in radians. If x is real, the return value has a lower bound of one, cosh(x)≥1.
        ///http://fortranwiki.org/fortran/show/cosh.
        /// </summary>
        internal static string intr_cosh {
            get {
                return ResourceManager.GetString("intr_cosh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to count(mask [, dim, kind]) Counts the number of .true. elements in a logical mask, or, if the dim argument is supplied, counts the number of elements along each row of the array in the dim direction. If the array has zero size, or all of the elements of mask are .false., then the result is 0.
        ///
        ///Standard:
        ///Fortran 95 and later, with kind argument Fortran 2003 and later
        ///
        ///Class:
        ///Transformational function
        ///
        ///Syntax:
        ///result = count(mask [, dim, kind])
        ///Arguments:
        ///mask - The type shall be logical.
        ///dim - (Op [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_count {
            get {
                return ResourceManager.GetString("intr_count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns a real value representing the elapsed CPU time in seconds. This is useful for testing segments of code to determine execution time.
        ///
        ///If a time source is available, time will be reported with microsecond resolution. If no time source is available, time is set to -1.0.
        ///
        ///Note that time may contain a, system dependent, arbitrary offset and may not start with 0.0. For cpu_time, the absolute value is meaningless, only differences between subsequent calls to this subroutine, as shown in the example bel [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_cpu_time {
            get {
                return ResourceManager.GetString("intr_cpu_time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cshift(array, shift [, dim]) performs a circular shift on elements of array along the dimension of dim. If dim is omitted it is taken to be 1. dim is a scaler of type integer in the range of 1≤DIM≤n where n n is the rank of array. If the rank of array is one, then all elements of array are shifted by shift places. If rank is greater than one, then all complete rank one sections of array along the given dimension are shifted. Elements shifted out one end of each rank one section are shifted back in the other [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string intr_cshift {
            get {
                return ResourceManager.GetString("intr_cshift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Intrinsic_Icon {
            get {
                object obj = ResourceManager.GetObject("Intrinsic_Icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Module_Icon {
            get {
                object obj = ResourceManager.GetObject("Module_Icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Search {
            get {
                object obj = ResourceManager.GetObject("Search", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Subroutine_Icon {
            get {
                object obj = ResourceManager.GetObject("Subroutine_Icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Type_Icon {
            get {
                object obj = ResourceManager.GetObject("Type_Icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap variable_char {
            get {
                object obj = ResourceManager.GetObject("variable_char", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap variable_float {
            get {
                object obj = ResourceManager.GetObject("variable_float", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap variable_int {
            get {
                object obj = ResourceManager.GetObject("variable_int", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap variable_logical {
            get {
                object obj = ResourceManager.GetObject("variable_logical", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap variable_type {
            get {
                object obj = ResourceManager.GetObject("variable_type", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
